<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Receiver</name>
    </assembly>
    <members>
        <member name="T:ReceiverSlice.Receiver">
            <summary>
            This class encompasses the functionality required to connect to and communicate with a VR2C
            receiver connected via serial port.
            </summary>
        </member>
        <member name="M:ReceiverSlice.Receiver.#ctor(System.IO.Ports.SerialPort,System.String,EventSlice.Dispatcher)">
            <summary>
            Public constructor for the Receiver class.
            </summary>
            <param name="serialPort">The serial port object to which the receiver is connected</param>
            <param name="portName">The name of the port (i.e. COM1, COM2, etc.)</param>
            <param name="dispatcher">The event queue dispatcher where events generated by this class are sent</param>
            <remarks>
            After opening the port, the constructor calls the init() method which determines whether the hardware connect
            is, in fact, a VEMCO reciever and then proceeds to configure it.  After returning, the constructor then instructs
            the receiver to start sending "Real Time" data.  Finally the run() method is called and the objects stays in
            the run method until it shutdown() is called.  With the exception of whether the class in run()ing or not, no state
            is maintained by the class.
            </remarks>
        </member>
        <member name="M:ReceiverSlice.Receiver.init">
            <summary>
            Called by the constructor to determine whether a VEMCO receiver is attached (vs another kind of 
            serial device), what the firmware is and which configuration file should be used.
            </summary>
            <remarks>
            Because one of the goals of this method is to determine the firmware (and corresponding configuration file),
            for the most part we must try both "default" commands and all those available in the configuration files.
            One assumption here is that future changes to protocol's INFO and discovery methods will not interfere with
            the operation of prior receivers.  And although we can take some care to provide as much flexibility for
            changes in the protocol, there are clearly some limits.  For example, we cannot anticipate a change to
            a binary format.
            
            The init() method first attempts to "discover" the connected receiver.  Generally a receiver will not respond
            to commands that are not prefaced by the serial number, etc.  Since we do not have the serial number prior to 
            running this method, we must use the VEMCO's broadcast and discover commands.
            
            Next the method issues INFO commands in order to scrape out the firmware version.  We assume here that the 
            manufacturer's protocol will remain stable within a firmware version.  Also note that so long as the protocol
            itself does not change, there is no need for additional configuration files.  
            
            Assuming that these two tasks are completed without bailing, then init() command completes and returns
            control to the constructor.
            </remarks>
            <exception cref="T:ReceiverSlice.ReceiverExceptions">Thrown when either the discovery
            or info phase is not able to acquire the needed information</exception>
        </member>
        <member name="M:ReceiverSlice.Receiver._write(System.String)">
            <summary>
            This is a private method that sends raw text to the serial port.  The public methods are preferable.
            </summary>
            <param name="text">Raw text to be sent to the serial port</param>
        </member>
        <member name="M:ReceiverSlice.Receiver.write(System.String,System.Object[])">
            <summary>
            Formats and sends a command to the receiver hardware.
            </summary>
            <param name="command">A command corresponding to an entry in the encoder section of the config file</param>
            <param name="arguments">An array containing any arguments to the command.</param>
            <remarks>Use write(String command) instead if you have no arguments.</remarks>
        </member>
        <member name="M:ReceiverSlice.Receiver.write(System.String)">
            <summary>
            Formats and sends a command to the receiver hardware.
            </summary>
            <param name="command">A command corresponding to an entry in the encoder section of the config file</param>
        </member>
        <member name="M:ReceiverSlice.Receiver.shutdown">
            <summary>
            Shuts down the receiver as cleanly as possible.
            </summary>
            <remarks>
            The method first switches the state of the receiver to shutdown (goState = 0).  If there is data
            that happens to show up within 2.5 seconds of this command being execute, the read is completed and
            the corresponding event, if any, is sent to the dispatcher.  If the read completes before, then the 
            serial port is shutdown early.  At the end of 2.5 seconds, regardless of whether a read is being performed,
            the serial port is shutdown.
            </remarks>
        </member>
        <member name="M:ReceiverSlice.Receiver.run">
            <summary>
            Objects of this class spend most of their execution time in this method.  It simply waits asynchronously (control
            is returned to the constructor and then returned here on an interrupt) for data.  When data is read it is packaged
            and sent to the event dispatcher.  
            </summary>
            <returns></returns>
            <exception cref="T:ReceiverSlice.ReceiverExceptions">Thrown when the EOF is reached on the read stream (contains an 
            EndOfStreamException</exception>
        </member>
        <member name="P:ReceiverSlice.Receiver.portName">
            <summary>
            Human readable name for the port to which the Receiver is attached (i.e. COM1)
            </summary>
        </member>
        <member name="P:ReceiverSlice.Receiver.TTL">
            <summary>
            Time-To-Live is a relative measure of the number of serious errors this object
            has received in its lifetime.  When TTL = 0, the serial port should be closed 
            and this object removed from the runtime.  
            </summary>
        </member>
    </members>
</doc>
