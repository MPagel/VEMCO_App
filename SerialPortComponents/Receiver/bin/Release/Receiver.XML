<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Receiver</name>
    </assembly>
    <members>
        <member name="T:ReceiverSlice.Encoder">
            <summary>
            The Encoder builds commands as requested by the Receiver (possibly through public write() methods),
            by looking up the requested command in the configuration file.  The configuration file specifies
            the format and the encoder uses String.Format to build the string that is finally returned.  Before
            returning the string, however, it is verified as conforming to the config's spec.
            </summary>
        </member>
        <member name="M:ReceiverSlice.Encoder.#ctor(System.String,System.Object)">
            <summary>
            This constructor uses the command prefix and encoder.
            </summary>
            <param name="prefix"> SSSSSS.P#CC where SSSSSS is the serial number of the receiver.</param>
            <param name="encoderConfig">Configuration containing 'encoder' entries.</param>
        </member>
        <member name="M:ReceiverSlice.Encoder.build(System.String)">
            <summary>
            Builds a command with no arguments called.
            </summary>
            <param name="command">The name of the command as defined in the configuration.</param>
            <returns>String formatted as a VEMCO command to be sent to the VR2C hardware.</returns>
            <remarks>This is a wrapper to the build(string,object) method.  The command prefix does
            not need to be passed to support</remarks>
        </member>
        <member name="M:ReceiverSlice.Encoder.build(System.String,System.Object[])">
            <summary>
            Builds a command with arguments.
            </summary>
            <param name="command">The name of the command as defined in the configuration.</param>
            <param name="arguments">The parameters required to complete the build.</param>
            <returns>This is a wrapper to the build(string,object) method.</returns>
        </member>
        <member name="M:ReceiverSlice.Encoder.valid(System.String)">
            <summary>
            Determines whether the processed command is valid for the current json configuration (by firmware version)
            </summary>
            <param name="processed_commmand">The command that is being validated</param>
            <returns>True if the processed command is valid for the current json configuration</returns>
        </member>
        <member name="P:ReceiverSlice.Encoder.encoderConfig">
            <summary>
            The json configuration object.
            </summary>
        </member>
        <member name="T:ReceiverSlice.RealTimeEvents.ReceiverEvent">
            <summary>
            This abstract class provides the plumbing that every event generated by the Receiver class should
            include... the receiver object, the portName, the serialNumber, the model and the json configuration object
            </summary>
        </member>
        <member name="M:ReceiverSlice.RealTimeEvents.ReceiverEvent.#ctor(System.String,ReceiverSlice.Receiver,System.String,System.String,System.String,FridayThe13th.JsonObject)">
            <summary>
            
            </summary>
            <param name="message">This should be some human readable text about why the event is being generated.</param>
            <param name="receiver">The Receiver object associated with the VEMCO hardware.</param>
            <param name="portName">The name of the serial port it is connected to (i.e. COM1)</param>
            <param name="serialNumber">The serial number of the receiver.</param>
            <param name="model">The model of the receiver.</param>
            <param name="config">The json object for the configration file.</param>
        </member>
        <member name="T:ReceiverSlice.RealTimeEvents.NewReceiver">
            <summary>
            This event is generated when a VEMCO receiver is configured on a serial port.
            As with all RealTime Events, the data is accessible dynamically.
            </summary>
        </member>
        <member name="M:ReceiverSlice.RealTimeEvents.NewReceiver.#ctor(ReceiverSlice.Receiver,System.String,System.String,System.String,FridayThe13th.JsonObject)">
            <summary>
            Default constructor.
            </summary>
            <param name="receiver">The Receiver object associated with the VEMCO hardware.</param>
            <param name="portName">The name of the serial port it is connected to (i.e. COM1)</param>
            <param name="serialNumber">The serial number of the receiver.</param>
            <param name="model">The model of the receiver.</param>
            <param name="config">The json object for the configration file.</param>
        </member>
        <member name="T:ReceiverSlice.RealTimeEvents.UnparsedMessage">
            <summary>
            This event is generated when a message is received from the VEMCO hardware.
            </summary>
        </member>
        <member name="M:ReceiverSlice.RealTimeEvents.UnparsedMessage.#ctor(System.String,ReceiverSlice.Receiver,System.String,System.String,System.String,FridayThe13th.JsonObject)">
            <summary>
            Default constructor.
            </summary>
            <param name="receiver">The Receiver object associated with the VEMCO hardware.</param>
            <param name="portName">The name of the serial port it is connected to (i.e. COM1)</param>
            <param name="serialNumber">The serial number of the receiver.</param>
            <param name="model">The model of the receiver.</param>
            <param name="config">The json object for the configration file.</param>
            <param name="unparsedMessage">The String of the unparsed message.</param>
        </member>
        <member name="T:ReceiverSlice.RealTimeEvents.DelReceiver">
            <summary>
            Fired when a receiver has been removed from its serial port connnection.
            </summary>
        </member>
        <member name="M:ReceiverSlice.RealTimeEvents.DelReceiver.#ctor(ReceiverSlice.Receiver,System.String,System.String,System.String,FridayThe13th.JsonObject)">
            <summary>
            Default constructor.
            </summary>
            <param name="receiver">The Receiver object associated with the VEMCO hardware.</param>
            <param name="portName">The name of the serial port it is connected to (i.e. COM1)</param>
            <param name="serialNumber">The serial number of the receiver.</param>
            <param name="model">The model of the receiver.</param>
            <param name="config">The json object for the configration file.</param>
        </member>
        <member name="T:ReceiverSlice.RealTimeEvents.ExcepReceiver">
            <summary>
            This event is generated when the receiver enters into a failure mode.  It may or not include an Exception object
            thrown in conjunction.
            </summary>
        </member>
        <member name="M:ReceiverSlice.RealTimeEvents.ExcepReceiver.#ctor(System.Boolean,System.String,ReceiverSlice.Receiver,System.String,System.String,System.String,FridayThe13th.JsonObject)">
            <summary>
            Constructor when no Exception has been or will be thrown.
            </summary>
            <param name="fatal">Set to true if the fault requires the serial port to be closed.</param>
            <param name="text">Reason for failure (human readable)</param>
            <param name="receiver">The Receiver object associated with the VEMCO hardware.</param>
            <param name="portName">The name of the serial port it is connected to (i.e. COM1)</param>
            <param name="serialNumber">The serial number of the receiver.</param>
            <param name="model">The model of the receiver.</param>
            <param name="config">The json object for the configration file.</param>
        </member>
        <member name="M:ReceiverSlice.RealTimeEvents.ExcepReceiver.#ctor(System.Exception,System.Boolean,ReceiverSlice.Receiver,System.String,System.String,System.String,FridayThe13th.JsonObject)">
            <summary>
            Constructor when an Exception has been or will be thrown.
            </summary>
            <param name="re">The corresponding Exception</param>
            <param name="fatal">Set to true if the fault requires the serial port to be closed.</param>
            <param name="receiver">The Receiver object associated with the VEMCO hardware.</param>
            <param name="portName">The name of the serial port it is connected to (i.e. COM1)</param>
            <param name="serialNumber">The serial number of the receiver.</param>
            <param name="model">The model of the receiver.</param>
            <param name="config">The json object for the configration file.</param>
        </member>
        <member name="T:ReceiverSlice.RealTimeEvents.NoteReceiver">
            <summary>
            This class reports an event that may be of interest to the user but for which there is no need to alter
            the flow of the program.
            </summary>
        </member>
        <member name="M:ReceiverSlice.RealTimeEvents.NoteReceiver.#ctor(System.String,ReceiverSlice.Receiver,System.String,System.String,System.String,FridayThe13th.JsonObject)">
            <param name="text">Human readable string of noteworthy information.</param>
            <param name="receiver">The Receiver object associated with the VEMCO hardware.</param>
            <param name="portName">The name of the serial port it is connected to (i.e. COM1)</param>
            <param name="serialNumber">The serial number of the receiver.</param>
            <param name="model">The model of the receiver.</param>
            <param name="config">The json object for the configration file.</param>
        </member>
        <member name="T:ReceiverSlice.ReceiverExceptions">
            <summary>
            Faults occuring in the Receiver may create and throw this class.
            </summary>
        </member>
        <member name="M:ReceiverSlice.ReceiverExceptions.#ctor(ReceiverSlice.Receiver,System.String,System.Boolean)">
            <summary>
            Generated for faults that occur without a prior exception being generated.
            </summary>
            <param name="fatal">Set to true if the fault requires the serial port to be closed.</param>
            <param name="text">Reason for failure (human readable)</param>
            <param name="receiver">The Receiver object associated with the VEMCO hardware.</param>
        </member>
        <member name="M:ReceiverSlice.ReceiverExceptions.#ctor(ReceiverSlice.Receiver,System.String,System.Boolean,System.Exception)">
            <summary>
            Generated for faults that occur with an associating exception.
            </summary>
            <param name="fatal">Set to true if the fault requires the serial port to be closed.</param>
            <param name="text">Reason for failure (human readable)</param>
            <param name="receiver">The Receiver object associated with the VEMCO hardware.</param>
            <param name="originatingException">The Exception precding this exception.</param>
        </member>
        <member name="M:ReceiverSlice.ReceiverExceptions.ToString">
            <summary>
            stringifys the event
            </summary>
            <returns>string</returns>
        </member>
        <member name="P:ReceiverSlice.ReceiverExceptions.fatal">
            <summary>
            Set to true if the fault requires the serial port to be closed.
            </summary>
        </member>
        <member name="P:ReceiverSlice.ReceiverExceptions.text">
            <summary>
            Reason for failure (human readable)
            </summary>
        </member>
        <member name="P:ReceiverSlice.ReceiverExceptions.receiver">
            <summary>
            The Receiver object associated with the VEMCO hardware.
            </summary>
        </member>
        <member name="P:ReceiverSlice.ReceiverExceptions.originatingException">
            <summary>
            The Exception precding this exception.
            </summary>
        </member>
        <member name="T:ReceiverSlice.EncoderExceptions">
            <summary>
            Generated when an encoder object enters a fault mode.
            </summary>
        </member>
        <member name="M:ReceiverSlice.EncoderExceptions.#ctor(System.String,System.String)">
            <summary>
            Error without exception.
            </summary>
            <param name="commandPrefix">The prefix that incudes the serial number of the device.</param>
            <param name="text">The reason this event is being generated.</param>
        </member>
        <member name="M:ReceiverSlice.EncoderExceptions.#ctor(System.String,System.String,System.Exception)">
            <summary>
            error with exception
            </summary>
            <param name="commandPrefix">The prefix that incudes the serial number of the device.</param>
            <param name="text">The reason this event is being generated.</param>
            <param name="e">Exception preceding this exception.</param>
        </member>
        <member name="P:ReceiverSlice.EncoderExceptions.text">
            <summary>
            Reason for the error.
            </summary>
        </member>
        <member name="P:ReceiverSlice.EncoderExceptions.e">
            <summary>
            Exception resulting from fault (may or may not be present)
            </summary>
        </member>
        <member name="P:ReceiverSlice.EncoderExceptions.deviceSerial">
            <summary>
            The serial number of the device generating this exception.
            </summary>
        </member>
        <member name="T:ReceiverSlice.Receiver">
            <summary>
            This class encompasses the functionality required to connect to and communicate with a VR2C
            receiver connected via serial port.
            </summary>
        </member>
        <member name="M:ReceiverSlice.Receiver.#ctor(System.IO.Ports.SerialPort,System.String,EventSlice.Dispatcher)">
            <summary>
            Public constructor for the Receiver class.
            </summary>
            <param name="serialPort">The serial port object to which the receiver is connected</param>
            <param name="portName">The name of the port (i.e. COM1, COM2, etc.)</param>
            <param name="dispatcher">The event queue dispatcher where events generated by this class are sent</param>
            <remarks>
            After opening the port, the constructor calls the init() method which determines whether the hardware connect
            is, in fact, a VEMCO reciever and then proceeds to configure it.  After returning, the constructor then instructs
            the receiver to start sending "Real Time" data.  Finally the run() method is called and the objects stays in
            the run method until it shutdown() is called.  With the exception of whether the class in run()ing or not, no state
            is maintained by the class.
            </remarks>
        </member>
        <member name="M:ReceiverSlice.Receiver.init">
            <summary>
            Called by the constructor to determine whether a VEMCO receiver is attached (vs another kind of 
            serial device), what the firmware is and which configuration file should be used.
            </summary>
            <remarks>
            Because one of the goals of this method is to determine the firmware (and corresponding configuration file),
            for the most part we must try both "default" commands and all those available in the configuration files.
            One assumption here is that future changes to protocol's INFO and discovery methods will not interfere with
            the operation of prior receivers.  And although we can take some care to provide as much flexibility for
            changes in the protocol, there are clearly some limits.  For example, we cannot anticipate a change to
            a binary format.
            
            The init() method first attempts to "discover" the connected receiver.  Generally a receiver will not respond
            to commands that are not prefaced by the serial number, etc.  Since we do not have the serial number prior to 
            running this method, we must use the VEMCO's broadcast and discover commands.
            
            Next the method issues INFO commands in order to scrape out the firmware version.  We assume here that the 
            manufacturer's protocol will remain stable within a firmware version.  Also note that so long as the protocol
            itself does not change, there is no need for additional configuration files.  
            
            Assuming that these two tasks are completed without bailing, then init() command completes and returns
            control to the constructor.
            </remarks>
            <exception cref="T:ReceiverSlice.ReceiverExceptions">Thrown when either the discovery
            or info phase is not able to acquire the needed information</exception>
        </member>
        <member name="M:ReceiverSlice.Receiver._write(System.String)">
            <summary>
            This is a private method that sends raw text to the serial port.  The public methods are preferable.
            </summary>
            <param name="text">Raw text to be sent to the serial port</param>
        </member>
        <member name="M:ReceiverSlice.Receiver.write(System.String,System.Object[])">
            <summary>
            Formats and sends a command to the receiver hardware.
            </summary>
            <param name="command">A command corresponding to an entry in the encoder section of the config file</param>
            <param name="arguments">An array containing any arguments to the command.</param>
            <remarks>Use write(String command) instead if you have no arguments.</remarks>
        </member>
        <member name="M:ReceiverSlice.Receiver.write(System.String)">
            <summary>
            Formats and sends a command to the receiver hardware.
            </summary>
            <param name="command">A command corresponding to an entry in the encoder section of the config file</param>
        </member>
        <member name="M:ReceiverSlice.Receiver.shutdown">
            <summary>
            Shuts down the receiver as cleanly as possible.
            </summary>
            <remarks>
            The method first switches the state of the receiver to shutdown (goState = 0).  If there is data
            that happens to show up within 2.5 seconds of this command being execute, the read is completed and
            the corresponding event, if any, is sent to the dispatcher.  If the read completes before, then the 
            serial port is shutdown early.  At the end of 2.5 seconds, regardless of whether a read is being performed,
            the serial port is shutdown.
            </remarks>
        </member>
        <member name="M:ReceiverSlice.Receiver.run">
            <summary>
            Objects of this class spend most of their execution time in this method.  It simply waits asynchronously (control
            is returned to the constructor and then returned here on an interrupt) for data.  When data is read it is packaged
            and sent to the event dispatcher.  
            </summary>
            <returns></returns>
            <exception cref="T:ReceiverSlice.ReceiverExceptions">Thrown when the EOF is reached on the read stream (contains an 
            EndOfStreamException</exception>
        </member>
        <member name="P:ReceiverSlice.Receiver.portName">
            <summary>
            Human readable name for the port to which the Receiver is attached (i.e. COM1)
            </summary>
        </member>
        <member name="P:ReceiverSlice.Receiver.TTL">
            <summary>
            Time-To-Live is a relative measure of the number of serious errors this object
            has received in its lifetime.  When TTL = 0, the serial port should be closed 
            and this object removed from the runtime.  
            </summary>
        </member>
    </members>
</doc>
