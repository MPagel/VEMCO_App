using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EventSlice.Interfaces;
namespace SerialPortSlice.RealTimeEvents
{
    /// <summary>
    /// This provides a convenient base class for events generated by the Serial Port Manager.
    /// </summary>
    /// <remarks>
    /// At the time of writing, this class simply passes null as the originating event as
    /// all events from this manager will be original with no preceding event that needs
    /// to be registered.
    /// </remarks>
    public abstract class ServerRealTimeEvents : RealTimeEvent
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        /// <param name="message">The human readable reason for the event being generated.</param>
        public ServerRealTimeEvents(string message)
            :base(message, null)
        {
        }
    }

    /// <summary>
    /// ServerStartUp fires when... well the server starts up and is ready to look for VEMCO receivers attached
    /// via a serial port.
    /// </summary>
    public class ServerStartUp : ServerRealTimeEvents
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ServerStartUp()
            : base("Serial port servicer starting.")
        {
        }
    }

    /// <summary>
    /// ServerStop fires when the server is no longer looking for receivers but may still have configured
    /// receivers that have not been removed and may still be reading data.
    /// </summary>
    public class ServerStop : ServerRealTimeEvents
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ServerStop()
            : base("Serial port servicer stopping.")
        {
        }
    }

    /// <summary>
    /// This event fires when the server has stopped listening for new receivers and has
    /// also removed all configured receivers from the service so no more data is being read from the hardware.
    /// </summary>
    /// <remarks>
    /// At the time of writing, we anticipate that this should be the last event that the system sends before 
    /// the process dies.
    /// </remarks>
    public class ServerStopped : ServerRealTimeEvents
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ServerStopped()
            : base("Serial port servicer stopped.")
        {
        }
    }

    /// <summary>
    /// Server Exceptions are generated by the Serial Port Servicer when a fault mode is entered.
    /// </summary>
    public class ServerException : ServerRealTimeEvents
    {
        /// <summary>
        /// Constructor for server error occuring without a corresponding exception.
        /// </summary>
        /// <param name="reason">The reason this exception was generated.</param>
        /// <param name="fatal">Set to true if the error forces the server to shutdown or restart.</param>
        public ServerException(string reason, Boolean fatal)
            :base("Server Error (fatal?" + fatal +  "): " + reason)
        {
            this["fatal"] = fatal;
        }

        /// <summary>
        ///Constructor for server exception with the corresponding exception available.
        /// </summary>
        /// <param name="originatingException">The corresponding exception</param>
        /// <param name="fatal">Set to true if the error forces the server to shutdown or restart</param>
        public ServerException(Exception originatingException, Boolean fatal)
            :base("Server Exception (fatal?" + fatal + "): " + originatingException.ToString())
        {
            this["fatal"] = fatal;
        }
    }
}
